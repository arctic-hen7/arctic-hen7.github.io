
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>The Arctic Blog</title>
    <subtitle>A blog about programming, productivity, and knowledge! More specific feeds are available for each category.</subtitle>
    <link href="https://arctic-hen7.github.io/blog/feed.xml" rel="self"/>
    <link href="https://arctic-hen7.github.io/blog"/>
    <updated>2021-09-15T08:13:12Z</updated>
    <id>https://arctic-hen7.github.io/blog</id>
    <author>
        <name>arctic_hen7</name>
        <email>arctic_hen7@pm.me</email>
    </author>
    
    <entry>
        <title>Welcome to Dev!</title>
        <link href="https://arctic-hen7.github.io/blog/dev/welcome/"/>
        <updated>2021-08-10T00:00:00Z</updated>
        <id>https://arctic-hen7.github.io/blog/dev/welcome/</id>
        <content type="html">&lt;p&gt;Welcome to the Dev category of my blog!&lt;/p&gt;
&lt;p&gt;This category will be used to document my journeys in programming, across all the languages I use! As of August 2021, I&#39;m mostly working with Rust (if you haven&#39;t, try it!), but I&#39;ve worked extensively with JavaScript in the past, and I&#39;ll probably document some JS stuff here too!&lt;/p&gt;
</content>
    </entry>
    
    <entry>
        <title>Welcome to Prod!</title>
        <link href="https://arctic-hen7.github.io/blog/prod/welcome/"/>
        <updated>2021-08-10T00:00:00Z</updated>
        <id>https://arctic-hen7.github.io/blog/prod/welcome/</id>
        <content type="html">&lt;p&gt;Welcome to the Prod category of my blog!&lt;/p&gt;
</content>
    </entry>
    
    <entry>
        <title>Welcome to Σοφος!</title>
        <link href="https://arctic-hen7.github.io/blog/sophos/welcome/"/>
        <updated>2021-08-10T00:00:00Z</updated>
        <id>https://arctic-hen7.github.io/blog/sophos/welcome/</id>
        <content type="html">&lt;p&gt;Welcome to the Σοφος category of my blog!&lt;/p&gt;
</content>
    </entry>
    
    <entry>
        <title>Automation with Bonnie</title>
        <link href="https://arctic-hen7.github.io/blog/dev/how-to-automate-with-bonnie/"/>
        <updated>2021-08-12T00:00:00Z</updated>
        <id>https://arctic-hen7.github.io/blog/dev/how-to-automate-with-bonnie/</id>
        <content type="html">&lt;p&gt;As developers, we&#39;re faced with, generally speaking, three kinds of work: &lt;strong&gt;problem solving&lt;/strong&gt;, &lt;strong&gt;implementation&lt;/strong&gt;, and &lt;strong&gt;mundane tasks&lt;/strong&gt;. Problem solving can be hard, but it&#39;s extremely rewarding. Implementing code is generally great, except that it inevitably generates problems for you to solve, but that&#39;s part of the joy!&lt;/p&gt;
&lt;p&gt;In this post though, I want to focus on the third type of work we do -- mundane, repetitive tasks. This could be anything, like a long build command, typing the same sequence of commands over and over again, or banging your head against a wall when you try to read your own code six months later.&lt;/p&gt;
&lt;p&gt;Bonnie is a tool I built a few months ago as my first ever project in &lt;a href=&quot;https://rust-lang.org/&quot;&gt;Rust&lt;/a&gt;, and since then I&#39;ve made significant updates that have improved every facet of it. It was originally intended as a replacement for NPM scripts, the simple little command aliasing system many JavaScript developers will be familiar with. Problem is, Rust doesn&#39;t have that, nor do a lot of languages! Bonnie was designed to be a cross-platform system to enable command aliasing in any project, regardless of programming language!&lt;/p&gt;
&lt;p&gt;Today, Bonnie supports custom arguments to scripts, environment variable interpolation, subcommands, conditional command ordering, and so much more!&lt;/p&gt;
&lt;h2&gt;Installing&lt;/h2&gt;
&lt;p&gt;Bonnie has pre-built binaries for Linux (and musl), MacOS, and Windows, which you can download from &lt;a href=&quot;https://github.com/arctic-hen7/bonnie/releases&quot;&gt;here&lt;/a&gt;. After downloading the right one, put it in a directory from which you can execute scripts, like &lt;code&gt;/usr/local/bin&lt;/code&gt; on Linux.&lt;/p&gt;
&lt;p&gt;If you&#39;re using Docker or a platform for which there&#39;s not a pre-built binary, check out the installation instructions on the homepage &lt;a href=&quot;https://github.com/arctic-hen7/bonnie&quot;&gt;here&lt;/a&gt;. If you&#39;d really like me to add a binary for another platform, open an issue on the project and I&#39;m happy to oblige!&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Once you can run Bonnie, make sure everything&#39;s working by running &lt;code&gt;bonnie -v&lt;/code&gt;. You should see the version of Bonnie you&#39;re running. Bonnie will now work. If it doesn&#39;t, I&#39;ve stuffed up, and you should slap me in the face with a cold fish (or a GitHub issue).&lt;/p&gt;
&lt;h2&gt;Writing scripts&lt;/h2&gt;
&lt;p&gt;So, let&#39;s say you&#39;ve got a build script that&#39;s &lt;em&gt;really&lt;/em&gt; long. Easy! Run &lt;code&gt;bonnie -i&lt;/code&gt; to create a new configuration file in your current directory (assuming you&#39;re in your project&#39;s directory), and pop this into &lt;code&gt;bonnie.toml&lt;/code&gt; underneath &lt;code&gt;[scripts]&lt;/code&gt;, substituting in your build command.&lt;/p&gt;
&lt;pre class=&quot;language-toml&quot;&gt;&lt;code class=&quot;language-toml&quot;&gt;&lt;span class=&quot;token key property&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;super long build command...&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Congrats! Now run &lt;code&gt;bonnie build&lt;/code&gt; and your command should run! That&#39;s the beauty of Bonnie, &lt;strong&gt;it gets out of your way and just works&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can repeat this process for as many things as you like, and Bonnie scripts can call other scripts easily! Every script will be executed as if you&#39;d run it in a terminal (PowerShell on Windows and &lt;code&gt;sh&lt;/code&gt; on MacOS and Linux), so just add &lt;code&gt;bonnie command-here&lt;/code&gt; into a script!&lt;/p&gt;
&lt;p&gt;If you want to replicate the functionality of NPM scripts, where any extra arguments you give after the command name will be added to the end (e.g. &lt;code&gt;npm build blah blah&lt;/code&gt; becomes &lt;code&gt;[build command] blah blah&lt;/code&gt;), just add &lt;code&gt;%%&lt;/code&gt; wherever in your command you want those arguments to be put (so you can put them at the end, the beginning, in the middle, anywhere!).&lt;/p&gt;
&lt;p&gt;Bonnie will also let you change the shell it runs things in (so you could use &lt;code&gt;zsh&lt;/code&gt; or &lt;code&gt;fish&lt;/code&gt; instead), specify multi-stage commands (just provide an array!), or even add subcommands! If you&#39;re feeling adventurous, you could try out &lt;a href=&quot;https://github.com/arctic-hen7/bonnie/wiki/Getting-Started-with-Bones&quot;&gt;Bones&lt;/a&gt;, which lets you run subcommands one after the other in a custom order, with if statements based on the exit codes commands give out! All the details are in &lt;a href=&quot;https://github.com/arctic-hen7/bonnie/wiki&quot;&gt;the wiki&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Final words&lt;/h2&gt;
&lt;p&gt;Bonnie is a great tool for automating repetitive work, it&#39;s full of features, lightning-fast, and it just gets out of your way. Check it out on GitHub &lt;a href=&quot;https://github.com/arctic-hen7/bonnie&quot;&gt;here&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I am the maintainer of Bonnie.&lt;/em&gt;&lt;/p&gt;
</content>
    </entry>
    
    <entry>
        <title>Introducing Perseus for Rust Web Development!</title>
        <link href="https://arctic-hen7.github.io/blog/dev/introducing-perseus/"/>
        <updated>2021-09-05T00:00:00Z</updated>
        <id>https://arctic-hen7.github.io/blog/dev/introducing-perseus/</id>
        <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/arctic-hen7/perseus&quot;&gt;Perseus&lt;/a&gt; is a high-level web development framework for Rust, with full support for SSR, SSG, revalidation, and even incremental generation! It&#39;s based on the low-level VDOM-less reactivity framework &lt;a href=&quot;https://github.com/sycamore-rs/sycamore&quot;&gt;Sycamore&lt;/a&gt;, and it adds higher-level functionality, like an Actix Web integrations for serving apps and even a CLI for easier development!&lt;/p&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Like most of my larger projects, Perseus has two main sources of documentation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.rs/perseus&quot;&gt;API Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://arctic-hen7.github.com/perseus&quot;&gt;The Book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&#39;ve also written a tutorial on building your first app with Perseus, which covers everything from installation to serving! You can find it in the book &lt;a href=&quot;https://arctic-hen7.github.io/perseus/tutorials/first_app/intro.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Project Status&lt;/h2&gt;
&lt;p&gt;At the time of writing, Perseus is in v0.1.2, and supports a lot of features. It&#39;s not ready for production yet, but it soon will be hopefully! The big issues right now are support for serverless platforms, for which I need to be able to access their filesystems, and SEO, which still needs some improvements.&lt;/p&gt;
&lt;p&gt;That said, Perseus is perfect for really anything that&#39;s not public-facing, and, provided no one points out any gaping holes soon, it&#39;s probably great for small projects. I wouldn&#39;t advise using it in a nuclear power plant (at all), but I can&#39;t stop you!&lt;/p&gt;
&lt;h2&gt;The Future&lt;/h2&gt;
&lt;p&gt;I want Perseus to become the NextJS of WASM, and I want to open up the phenomenal opportunities of diverse rendering strategies to Rust web developers, which for too long have only been the domain of JavaScript. There&#39;s still more work to be done, including native support for internationalization, but then I&#39;ll work on an app that uses it (and &lt;a href=&quot;https://github.com/arctic-hen7/diana&quot;&gt;Diana&lt;/a&gt;) to try to iron out any flaws and get the interface perfect.&lt;/p&gt;
&lt;p&gt;For now though, you can chat about Perseus in it&#39;s [Gitter community] or on its [channel] on the Sycamore Discord server (for Sycamore-related stuff, graciously provided by &lt;a href=&quot;https://github.com/lukechu10&quot;&gt;@lukechu10&lt;/a&gt;), and any feedback would be greatly appreciated!&lt;/p&gt;
</content>
    </entry>
    
    <entry>
        <title>How to Fix Ubuntu Broken After Deleting Rollup</title>
        <link href="https://arctic-hen7.github.io/blog/dev/breaking-ubuntu-rollup/"/>
        <updated>2021-09-15T00:00:00Z</updated>
        <id>https://arctic-hen7.github.io/blog/dev/breaking-ubuntu-rollup/</id>
        <content type="html">&lt;p&gt;This post details one of the strangest failures I&#39;ve ever seen in Ubuntu and how to fix it. For me, this occurred after deleting &lt;code&gt;rollup&lt;/code&gt;, but it may have been something else for you! Please leave a comment if you&#39;ve had this problem and if you have any idea how it works!&lt;/p&gt;
&lt;h2&gt;Scenario&lt;/h2&gt;
&lt;p&gt;I was working on &lt;a href=&quot;https://github.com/arctic-hen7/perseus&quot;&gt;Perseus&lt;/a&gt; this morning, specifically removing the dependency on &lt;a href=&quot;https://arctic-hen7.github.io/blog/dev/breaking-ubuntu-rollup/&quot;&gt;Rollup&lt;/a&gt; for the project. So, I naturally decided to remove Rollup completely from my system to test that there was no longer any dependency.&lt;/p&gt;
&lt;p&gt;So, I did what made sense; &lt;code&gt;yarn global remove rollup&lt;/code&gt;. And, to my dismay, &lt;code&gt;rollup&lt;/code&gt; still worked as a command. I ran &lt;code&gt;which rollup&lt;/code&gt; to find the exact location of the binary, which was in &lt;code&gt;~/.yarn/bin&lt;/code&gt;. And then I did what you should &lt;strong&gt;never&lt;/strong&gt; do. I decided to delete is manually with &lt;code&gt;rm&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now it&#39;s worth noting that around this time my system had become very slow due to some kind of swap glitch, and so I decided to restart, having just deleted a binary manually. Now it&#39;s worth noting that I installed &lt;code&gt;rollup&lt;/code&gt; through &lt;code&gt;yarn&lt;/code&gt;, which I installed through &lt;code&gt;npm&lt;/code&gt;, which I installed through &lt;code&gt;nvm&lt;/code&gt; (Node version manager), which I installed with &lt;code&gt;curl&lt;/code&gt;. That&#39;s &lt;em&gt;five&lt;/em&gt; degrees of separation from anything that should be remotely system-critical, hence my confusion at what happened next.&lt;/p&gt;
&lt;p&gt;So, booting my computer back up, everything was working as normal. I got to the login screen fine, the fan still whirring a bit from the swap glitch, and I typed in my password as usual. Then, as my desktop loaded, my mouse froze. I could not interact with my system in any way whatsoever. I rebooted &lt;em&gt;three&lt;/em&gt; times, the exact same thing.&lt;/p&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;My first thought was to change my login shell, which is &lt;code&gt;fish&lt;/code&gt;, to something more mainstream like &lt;code&gt;bash&lt;/code&gt;, as that could have some &lt;code&gt;rollup&lt;/code&gt; dependency that might be causing a system hang. I did that with recovery mode, which I&#39;ll explain now (you&#39;ll need this), but to no avail.&lt;/p&gt;
&lt;h3&gt;Ubuntu Recovery Mode&lt;/h3&gt;
&lt;p&gt;Ubuntu has a very helpful boot mode called recovery mode that you can use to repair a broken system. You&#39;ll need to be able to boot your system for this, which was fine for me because it was a post-login issue.&lt;/p&gt;
&lt;p&gt;You can access recovery mode by spamming &lt;code&gt;Esc&lt;/code&gt; as your computer boots to stop UEFI fast boot, and then press &lt;code&gt;Enter&lt;/code&gt; to continue boot. Immediately after that, hold down &lt;code&gt;Shift&lt;/code&gt; (don&#39;t spam it) to get the GRUB menu, the bootloader. Then go down to something like &lt;code&gt;Advanced Options&lt;/code&gt;, and then select &lt;code&gt;Recovery Mode&lt;/code&gt; with the newest kernel (for this issue at least, but this can also be used to revert broken kernel upgrades). You should now be taken to a terminal-only screen (where you&#39;ll need to decrypt your hard drive and the like), and then you&#39;ll get a menu of options. This will boot your filesystem read-only, so it&#39;s practically impossible to do any damage without changing that, which you can do in 20.04 and later by selecting &lt;code&gt;Enable networking&lt;/code&gt; and pressing &lt;code&gt;Enter&lt;/code&gt;. Then press the option that lets you drop into a root shell, and you now have a root terminal on your system!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Aside: THIS is why you should encrypt your hard drive! Otherwise, yeah, anyone could use this to do &lt;a href=&quot;https://r3xnation.wordpress.com/2016/11/01/how-to-hack-into-ubuntuany-version/&quot;&gt;anything they want&lt;/a&gt; (weird link but good explanation) to your system.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Actually Fixing It&lt;/h3&gt;
&lt;p&gt;After logging into a hung desktop with 10 minutes until I was needed on a Zoom meeting, I booted back into recovery mode, enabled networking, and switched to my user account with &lt;code&gt;su arctic_hen7&lt;/code&gt;. I confirmed that &lt;code&gt;rollup&lt;/code&gt; didn&#39;t exist, and then found that &lt;code&gt;yarn&lt;/code&gt; didn&#39;t either. That was weird, and neither did &lt;code&gt;node&lt;/code&gt;! In case you&#39;re thinking of weird &lt;code&gt;fish&lt;/code&gt; stuff with loading custom binaries, I was in &lt;code&gt;bash&lt;/code&gt; at this point. I still have no idea how deleting a binary manually managed to corrupt the entire JavaScript stack on my computer.&lt;/p&gt;
&lt;p&gt;Nevertheless, I reinstalled Node using &lt;a href=&quot;https://arctic-hen7.github.io/blog/dev/breaking-ubuntu-rollup/&quot;&gt;NVM&lt;/a&gt; (which I already had installed), reinstalled &lt;code&gt;yarn&lt;/code&gt;, and then ran &lt;code&gt;yarn global add rollup&lt;/code&gt; for good measure. I then tried popping into &lt;code&gt;fish&lt;/code&gt; to see how it was going. I use &lt;code&gt;fish&lt;/code&gt; with &lt;a href=&quot;https://arctic-hen7.github.io/blog/dev/breaking-ubuntu-rollup/&quot;&gt;Starship&lt;/a&gt;, and it was telling me that the latter wasn&#39;t working. Two minutes until that Zoom meeting by the way.&lt;/p&gt;
&lt;p&gt;I frantically rebooted and crossed my fingers, noting that my shell was still set to &lt;code&gt;bash&lt;/code&gt; in case Starship was still an issue. And it worked! Until a spontaneous logout 12 minutes later, which I think was unrelated, because it didn&#39;t happen again and still hasn&#39;t yet (I am so expecting one as a write this...).&lt;/p&gt;
&lt;p&gt;After my Zoom meeting, I then tried using &lt;code&gt;fish&lt;/code&gt; again: errors were gone. I assume Starship was trying to do something that&#39;s not allowed in recovery mode, but I can&#39;t yet remember the error message, so I have no idea what.&lt;/p&gt;
&lt;h2&gt;Closing Words&lt;/h2&gt;
&lt;p&gt;So, that was one of the weirdest issues I&#39;ve ever encountered in all my time using Linux, but thankfully it was a pretty easy fix. I have still found no documentation online about this, so hopefully this helps someone at some point in the future!&lt;/p&gt;
&lt;p&gt;Also, if you&#39;ve had this issue, please let me know in the comments!&lt;/p&gt;
&lt;p&gt;Oh, and the lesson from all this is to &lt;strong&gt;NEVER MANUALLY DELETE BINARIES!!!&lt;/strong&gt;&lt;/p&gt;
</content>
    </entry>
    
    <entry>
        <title>Gradient Text on Safari</title>
        <link href="https://arctic-hen7.github.io/blog/dev/safari-gradient-text/"/>
        <updated>2021-09-15T08:12:49Z</updated>
        <id>https://arctic-hen7.github.io/blog/dev/safari-gradient-text/</id>
        <content type="html">&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;You&#39;ve got some text with a beautiful gradient, it looks fantastic! Then you open your gorgeous new website in Safari, and half your text is missing. This is particularly from using &lt;code&gt;background-clip&lt;/code&gt; to create your gradients (as you would with &lt;a href=&quot;https://tailwindcss.com/&quot;&gt;Tailwind&lt;/a&gt;), and if the text goes multi-line, Safari will cut the second line off erratically. &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=169125&quot;&gt;Here&#39;s&lt;/a&gt; the bug report filed for WebKit a few years ago, which still hasn&#39;t been addressed.&lt;/p&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;-webkit-box-decoration-break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; clone&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yep, that&#39;s all. That should fix the problem completely on Safari! If you want an example, this is in use on this very website in the &lt;code&gt;pageHeader.njk&lt;/code&gt; component, which you can see &lt;a href=&quot;https://github.com/arctic-hen7/arctic-hen7.github.io/blob/cef3ee6b1715c1fb02f498188e57f2c746997dff/src/_includes/components/pageHeader.njk#L4&quot;&gt;here&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;In case this solution didn&#39;t work for you, there&#39;s a StackOverflow thread &lt;a href=&quot;https://stackoverflow.com/questions/44963978/safari-on-ios-not-displaying-text-when-using-background-clip-and-text-fill-color&quot;&gt;here&lt;/a&gt; with a few other options that will hopefully work for you!&lt;/p&gt;
</content>
    </entry>
</feed>
